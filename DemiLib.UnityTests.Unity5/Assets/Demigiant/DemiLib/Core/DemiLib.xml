<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DemiLib</name>
    </assembly>
    <members>
        <member name="T:DG.DemiLib.Attributes.DeBeginDisabledAttribute">
            <summary>
            Begins a conditional group that will be disabled if the given condition is not met.
            Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndDisabledAttribute"/>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeBeginDisabledAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Begins a conditional group that wil be disabled if the given condition is TRUE. Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndDisabledAttribute"/>
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (boolean)</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeBeginDisabledAttribute.#ctor(System.String,System.String,DG.DemiLib.Attributes.Condition)">
            <summary>
            Begins a conditional group that wil be disabled if the given condition is TRUE. Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndDisabledAttribute"/>
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (string)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeBeginDisabledAttribute.#ctor(System.String,System.Single,DG.DemiLib.Attributes.Condition)">
            <summary>
            Begins a conditional group that wil be disabled if the given condition is TRUE. Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndDisabledAttribute"/>
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeBeginDisabledAttribute.#ctor(System.String,System.Int32,DG.DemiLib.Attributes.Condition)">
            <summary>
            Begins a conditional group that wil be disabled if the given condition is TRUE. Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndDisabledAttribute"/>
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeEndDisabledAttribute">
            <summary>
            Closes a disabled group
            </summary>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeColoredLabelAttribute">
            <summary>
            <code>Property attribute</code>
            <para>Draws the label with the given color and background</para>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeColoredLabelAttribute.#ctor(System.String,System.String)">
            <summary>
            Colors the prefix label for the following property
            </summary>
            <param name="textColor">Prefix label color</param>
            <param name="bgColor">Prefix label bg color</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeCommentAttribute">
            <summary>
            <code>Decorator</code>
            <para>Shows a comment in the Inspector</para>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeCondition.#ctor(System.String,System.Boolean)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (boolean)</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeCondition.#ctor(System.String,System.String,DG.DemiLib.Attributes.Condition)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (string)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeCondition.#ctor(System.String,System.Single,DG.DemiLib.Attributes.Condition)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeCondition.#ctor(System.String,System.Int32,DG.DemiLib.Attributes.Condition)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeConditionalAttribute">
            <summary>
            <code>Property attribute</code>
            <para>Shows/hides or enables/disables the property depending on the given conditions</para>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeConditionalAttribute.#ctor(System.String,System.Boolean,DG.DemiLib.Attributes.ConditionalBehaviour)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (boolean)</param>
            <param name="behaviour">Behaviour in case condition is not met</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeConditionalAttribute.#ctor(System.String,System.String,DG.DemiLib.Attributes.Condition,DG.DemiLib.Attributes.ConditionalBehaviour)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (string)</param>
            <param name="conditionType">Condition type</param>
            <param name="behaviour">Behaviour in case condition is not met</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeConditionalAttribute.#ctor(System.String,System.Single,DG.DemiLib.Attributes.Condition,DG.DemiLib.Attributes.ConditionalBehaviour)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
            <param name="behaviour">Behaviour in case condition is not met</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeConditionalAttribute.#ctor(System.String,System.Int32,DG.DemiLib.Attributes.Condition,DG.DemiLib.Attributes.ConditionalBehaviour)">
            <summary>
            Shows/enables the property only if the condition is met
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
            <param name="behaviour">Behaviour in case condition is not met</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeDisabledAttribute">
            <summary>
            Disables a field if the given condition is not met.
            Works like DeConditional but:
            <para>- Is a Decorator, so it can be combined with other attributes</para>- Only allows to disable a field, not to hide it
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeDisabledAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Disables the field if the given condition is TRUE.
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (boolean)</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeDisabledAttribute.#ctor(System.String,System.String,DG.DemiLib.Attributes.Condition)">
            <summary>
            Disables the field if the given condition is TRUE.
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (string)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeDisabledAttribute.#ctor(System.String,System.Single,DG.DemiLib.Attributes.Condition)">
            <summary>
            Disables the field if the given condition is TRUE.
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeDisabledAttribute.#ctor(System.String,System.Int32,DG.DemiLib.Attributes.Condition)">
            <summary>
            Disables the field if the given condition is TRUE.
            </summary>
            <param name="propertyToCompare">Name of the property to check for conditions</param>
            <param name="value">Property value to compare (float)</param>
            <param name="conditionType">Condition type</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeDividerAttribute">
            <summary>
            <code>Decorator</code>
            <para>Draws a divider in the Inspector</para>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeDividerAttribute.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Draws a divider with the given size, color and margins
            </summary>
            <param name="height">Divider height</param>
            <param name="hexColor">Hex color (# optional)</param>
            <param name="marginTop">Top margin</param>
            <param name="marginBottom">Bottom margin</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeBeginGroupAttribute">
            <summary>
            Begins a group that will be drawn inside a box GUIStyle.
            Must always be closed by a <see cref="T:DG.DemiLib.Attributes.DeEndGroupAttribute"/>.
            <para>NOTE: doesn't respect order as usual decorators do: the group will contain any other decorators added to the same field</para>
            </summary>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeEndGroupAttribute">
            <summary>
            Closes a box group
            </summary>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeHeaderAttribute">
            <summary>
            <code>Decorator</code>
            <para>Draws a header in the inspector</para>
            </summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DeHeaderAttribute.marginTop">
            <summary>Top margin (default = 6)</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DeHeaderAttribute.marginBottom">
            <summary>Bottom margin (default = 3)</summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeHeaderAttribute.#ctor(System.String,System.String,System.String,UnityEngine.FontStyle,System.Int32)">
            <summary>
            Draws a header with a color and background color
            </summary>
            <param name="text">Text</param>
            <param name="textColor">Color hex (no #) for text, leave NULL to use default</param>
            <param name="bgColor">Color hex (no #) for bg, leave NULL to use no bg color</param>
            <param name="fontStyle">Font style</param>
            <param name="fontSize">Font size</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeHeaderAttribute.#ctor(System.String,UnityEngine.TextAnchor,System.String,System.String,UnityEngine.FontStyle,System.Int32)">
            <summary>
            Draws a header with a color and background color
            </summary>
            <param name="text">Text</param>
            <param name="textAnchor">TextAnchor</param>
            <param name="textColor">Color hex (no #) for text, leave NULL to use default</param>
            <param name="bgColor">Color hex (no #) for bg, leave NULL to use no bg color</param>
            <param name="fontStyle">Font style</param>
            <param name="fontSize">Font size</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeButtonAttribute">
            <summary>
            <code>Decorator + Method caller</code>
            Draws a button which will call the given method from the given class type
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.String,DG.DemiLib.Attributes.DePosition,System.String,System.String,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="buttonText">Button text</param>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
            <param name="textShade">Color shade (hex string, without #) for the button text</param>
            <param name="bgShade">Color shade (hex string, without #) for the button background</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(DG.DemiLib.Attributes.DePosition,System.String,System.String,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
            <param name="textShade">Color shade (hex string, without #) for the button text</param>
            <param name="bgShade">Color shade (hex string, without #) for the button background</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.String,System.String,System.String,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="buttonText">Button text</param>
            <param name="textShade">Color shade (hex string, without #) for the button text</param>
            <param name="bgShade">Color shade (hex string, without #) for the button background</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.String,System.String,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="textShade">Color shade (hex string, without #) for the button text</param>
            <param name="bgShade">Color shade (hex string, without #) for the button background</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.String,DG.DemiLib.Attributes.DePosition,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="buttonText">Button text</param>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(DG.DemiLib.Attributes.DePosition,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.String,System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="buttonText">Button text</param>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeButtonAttribute.#ctor(System.Type,System.String,System.Object[])">
            <summary>
            Draws a button which will call the given method. Method can be public/private/instance/static/whatever and on any class type
            </summary>
            <param name="targetType">Type of the class that implements the method to call</param>
            <param name="methodName">Name of the method to call</param>
            <param name="parameters">Eventual parameters to pass to the method</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeMethodButtonAttribute">
            <summary>
            <code>Method attribute</code>
            Draws a button which will call the given method
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeMethodButtonAttribute.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Draws a button which will call the method below.
            You can add as many DeMethodButton you want to the same method, then use the order parameter to order them correctly
            (note that the order will count only towards attributes on the same method, not overall).
            </summary>
            <param name="buttonText">Button text (if NULL uses a prettified version of the method name)</param>
            <param name="order">Order in which attributes for the same method will be displayed</param>
            <param name="parameters">Eventual parameters to pass to the method (higher means lower vertical position)</param>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HDefault">
            <summary>Default inspector width excluding label-reserved space</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HExtended">
            <summary>Default inspector width including label-reserved space</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HHalfLeft">
            <summary>Half of inspector width (extended or default depending on the attribute drawn), left side</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HHalfRight">
            <summary>Half of inspector width (extended or default depending on the attribute drawn), right side</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HThirdLeft">
            <summary>One third of inspector width (extended or default depending on the attribute drawn), left side</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HThirdMiddle">
            <summary>One third of inspector width (extended or default depending on the attribute drawn), middle</summary>
        </member>
        <member name="F:DG.DemiLib.Attributes.DePosition.HThirdRight">
            <summary>One third of inspector width (extended or default depending on the attribute drawn), right side</summary>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeToggleButton">
            <summary>
            <code>Property attribute</code>
            Draws a toggle button instead of the usual checkbox, only works with boolean fields.
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeToggleButton.#ctor(System.String,DG.DemiLib.Attributes.DePosition)">
            <summary>
            Draws a toggle button instead of the usual checkbox (only works with booleans)
            </summary>
            <param name="text">Button label</param>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeToggleButton.#ctor(DG.DemiLib.Attributes.DePosition)">
            <summary>
            Draws a toggle button instead of the usual checkbox (only works with booleans)
            </summary>
            <param name="position"><see cref="T:DG.DemiLib.Attributes.DePosition"/> of the button relative to Inspector width</param>
        </member>
        <member name="T:DG.DemiLib.Attributes.DeScriptExecutionOrderAttribute">
            <summary>
            <code>Class attribute</code>
            <para>Sets the script execution order index</para>
            </summary>
        </member>
        <member name="M:DG.DemiLib.Attributes.DeScriptExecutionOrderAttribute.#ctor(System.Int32)">
            <summary>
            Sets the script execution order for this class
            </summary>
            <param name="order">Script execution order index</param>
        </member>
        <member name="F:DG.DemiLib.Core.GUIUtils.isProSkin">
            <summary>
            Set when calling <code>DeGUI.BeginGUI</code>
            </summary>
        </member>
        <member name="T:DG.DemiLib.DeColorPalette">
            <summary>
            Stores a color palette, which can be passed to default DeGUI layouts when calling <code>DeGUI.BeginGUI</code>,
            and changed at any time by calling <code>DeGUI.ChangePalette</code>.
            You can inherit from this class to create custom color palettes with more color options.
            </summary>
        </member>
        <member name="T:DG.DemiLib.DeColorBG">
            <summary>
            Background colors
            </summary>
        </member>
        <member name="T:DG.DemiLib.DeColorContent">
            <summary>
            Content colors
            </summary>
        </member>
        <member name="T:DG.DemiLib.DeSkinColor">
            <summary>
            Contains both free and pro skins color variations,
            and automatically returns the correct one when converted to Color
            </summary>
        </member>
    </members>
</doc>
