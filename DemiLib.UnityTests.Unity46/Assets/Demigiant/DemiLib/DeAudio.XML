<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DeAudio</name>
    </assembly>
    <members>
        <member name="T:DG.DeAudio.DeAudioCollection">
            <summary>
            A collection of audio files. Still needs to be completed.
            </summary>
        </member>
        <member name="T:DG.DeAudio.DeAudioGroup">
            <summary>
            Audio group, connected to an AudioMixerGroup
            </summary>
        </member>
        <member name="F:DG.DeAudio.DeAudioGroup.maxSources">
            <summary>Max AudioSources for this group. DO NOT change this at runtime</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.Play(UnityEngine.AudioClip,System.Single,System.Boolean)">
            <summary>
            Plays the given sound with the given options.
            <para>Returns the <see cref="T:DG.DeAudio.DeAudioSource"/> instance used to play, or NULL if the clip couldn't be played</para>
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.Stop">
            <summary>Stops all sounds for this group</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.Stop(UnityEngine.AudioClip)">
            <summary>Stops all sounds for this group that are using the given clip</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.Unlock">
            <summary>Unlocks all <see cref="T:DG.DeAudio.DeAudioSource"/> instances for this group</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.Unlock(UnityEngine.AudioClip)">
            <summary>Unlocks all <see cref="T:DG.DeAudio.DeAudioSource"/> instances for this group that are using the given clip</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.FadeOut(System.Single,System.Boolean,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades out this group's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.FadeIn(System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades in this group's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioGroup.FadeTo(System.Single,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades this group's volume to the given value</summary>
        </member>
        <member name="T:DG.DeAudio.DeAudioManager">
            <summary>
            Global AudioManager.
            Must be instantiated only once per project (either manually or via code).
            Its GameObject is set automatically to DontDestroyOnLoad.
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Play(DG.DeAudio.DeAudioGroupId,UnityEngine.AudioClip,System.Single,System.Boolean)">
            <summary>
            Plays the given sound with the given options and using the given group id.
            A <see cref="T:DG.DeAudio.DeAudioGroup"/> with the given ID must exist in order for the sound to actually play.
            <para>Returns the <see cref="T:DG.DeAudio.DeAudioSource"/> instance used to play, or NULL if the clip couldn't be played</para>
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Stop">
            <summary>Stops all sounds</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Stop(DG.DeAudio.DeAudioGroupId)">
            <summary>Stops all sounds for the given group</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Stop(UnityEngine.AudioClip)">
            <summary>Stops all sounds for the given clip</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Unlock">
            <summary>Unlocks all <see cref="T:DG.DeAudio.DeAudioSource"/> instances</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Unlock(DG.DeAudio.DeAudioGroupId)">
            <summary>Unlocks all <see cref="T:DG.DeAudio.DeAudioSource"/> instances for the given group</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.Unlock(UnityEngine.AudioClip)">
            <summary>Unlocks all <see cref="T:DG.DeAudio.DeAudioSource"/> instances for the given clip</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.GetAudioGroup(DG.DeAudio.DeAudioGroupId)">
            <summary>
            Returns the <see cref="T:DG.DeAudio.DeAudioGroup"/> with the given ID, or NULL if there is none
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.GetMixerGroup(DG.DeAudio.DeAudioGroupId)">
            <summary>
            Returns the AudioMixerGroup for <see cref="T:DG.DeAudio.DeAudioGroup"/> with the given ID, or null if there is none
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeOut(System.Single,System.Boolean,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades out the global volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeIn(System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades in the global volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeTo(System.Single,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades the global volume to the given value</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeOut(DG.DeAudio.DeAudioGroupId,System.Single,System.Boolean,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades out the given group's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeIn(DG.DeAudio.DeAudioGroupId,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades in the given group's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeTo(DG.DeAudio.DeAudioGroupId,System.Single,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades the given group's volume to the given value</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeOut(UnityEngine.AudioClip,System.Single,System.Boolean,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades out the given clip's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeIn(UnityEngine.AudioClip,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades in the given clip's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioManager.FadeTo(UnityEngine.AudioClip,System.Single,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades the given clip's volume to the given value</summary>
        </member>
        <member name="T:DG.DeAudio.DeAudioNotificator">
            <summary>
            Static event notificator for all DeAudio events
            </summary>
        </member>
        <member name="T:DG.DeAudio.DeAudioSource">
            <summary>
            Data connected to every AudioSource added by <see cref="T:DG.DeAudio.DeAudioManager"/>
            </summary>
        </member>
        <member name="F:DG.DeAudio.DeAudioSource.locked">
            <summary>If TRUE, the AudioSource won't be reused until it's unlocked</summary>
        </member>
        <member name="P:DG.DeAudio.DeAudioSource.isFree">
            <summary>TRUE if the audioSource is not playing and is not locked</summary>
        </member>
        <member name="P:DG.DeAudio.DeAudioSource.unscaledVolume">
            <summary>Unscaled volume (doesn't include modifiers caused by global and group volumes)</summary>
        </member>
        <member name="P:DG.DeAudio.DeAudioSource.volume">
            <summary>Current volume (including modifiers caused by global and group volumes)</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioSource.Play(UnityEngine.AudioClip,System.Single,System.Boolean)">
            <summary>
            Play the given clip with the given options.
            Calling Play directly from a DeAudioSource overrides any lock that might've been set
            (though the locked status won't change)
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioSource.Stop">
            <summary>
            Stops any sound connected to this source
            </summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioSource.FadeOut(System.Single,System.Boolean,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades out this source's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioSource.FadeIn(System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades in this source's volume</summary>
        </member>
        <member name="M:DG.DeAudio.DeAudioSource.FadeTo(System.Single,System.Single,System.Boolean,DG.Tweening.TweenCallback)">
            <summary>Fades this source's volume to the given value</summary>
        </member>
        <member name="P:DG.DeAudio.Events.DeAudioEventArgs.type">
            <summary>Type of event</summary>
        </member>
        <member name="P:DG.DeAudio.Events.DeAudioEventArgs.audioGroup">
            <summary>Eventual <see cref="T:DG.DeAudio.DeAudioGroup"/> involved in the event (can be NULL)</summary>
        </member>
        <member name="P:DG.DeAudio.Events.DeAudioEventArgs.source">
            <summary>Eventual <see cref="T:DG.DeAudio.DeAudioSource"/> involved in the event (can be NULL)</summary>
        </member>
    </members>
</doc>
